{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file://P%3A/decentralized_ai_realestate/frontend/dapp-ai-realestate/lib/web3/utils.ts"],"sourcesContent":["import Web3 from 'web3';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    ethereum?: any;\r\n    web3?: any;\r\n  }\r\n}\r\n\r\nexport const getWeb3Instance = async () => {\r\n  if (typeof window !== 'undefined') {\r\n    // Modern dapp browsers\r\n    if (window.ethereum) {\r\n      try {\r\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        return new Web3(window.ethereum);\r\n      } catch (error) {\r\n        console.error('User denied account access', error);\r\n        throw error;\r\n      }\r\n    }\r\n    // Legacy dapp browsers\r\n    else if (window.web3) {\r\n      return new Web3(window.web3.currentProvider);\r\n    }\r\n  }\r\n  // Non-dapp browsers or no wallet installed\r\n  console.log('Non-Ethereum browser detected. Consider installing MetaMask!');\r\n  return null;\r\n};\r\n\r\nexport const getConnectedAccounts = async (web3: Web3) => {\r\n  return await web3.eth.getAccounts();\r\n};\r\n\r\n\r\nexport const shortenAddress = (address: string, chars = 4) => {\r\n    return `${address.substring(0, chars + 2)}...${address.substring(\r\n      address.length - chars\r\n    )}`;\r\n  };\r\n  \r\n  export const switchNetwork = async (web3: Web3, chainId: number) => {\r\n    if (!window.ethereum) throw new Error('MetaMask not installed');\r\n    \r\n    try {\r\n      await window.ethereum.request({\r\n        method: 'wallet_switchEthereumChain',\r\n        params: [{ chainId: web3.utils.toHex(chainId) }],\r\n      });\r\n    } catch (error: any) {\r\n      // This error code indicates that the chain has not been added to MetaMask\r\n      if (error.code === 4902) {\r\n        throw new Error('Network not added to MetaMask');\r\n      }\r\n      throw error;\r\n    }\r\n  };"],"names":[],"mappings":";;;;;;AAAA;;AASO,MAAM,kBAAkB;IAC7B,uCAAmC;;IAenC;IACA,2CAA2C;IAC3C,QAAQ,GAAG,CAAC;IACZ,OAAO;AACT;AAEO,MAAM,uBAAuB,OAAO;IACzC,OAAO,MAAM,KAAK,GAAG,CAAC,WAAW;AACnC;AAGO,MAAM,iBAAiB,CAAC,SAAiB,QAAQ,CAAC;IACrD,OAAO,GAAG,QAAQ,SAAS,CAAC,GAAG,QAAQ,GAAG,GAAG,EAAE,QAAQ,SAAS,CAC9D,QAAQ,MAAM,GAAG,QAChB;AACL;AAEO,MAAM,gBAAgB,OAAO,MAAY;IAC9C,IAAI,CAAC,OAAO,QAAQ,EAAE,MAAM,IAAI,MAAM;IAEtC,IAAI;QACF,MAAM,OAAO,QAAQ,CAAC,OAAO,CAAC;YAC5B,QAAQ;YACR,QAAQ;gBAAC;oBAAE,SAAS,KAAK,KAAK,CAAC,KAAK,CAAC;gBAAS;aAAE;QAClD;IACF,EAAE,OAAO,OAAY;QACnB,0EAA0E;QAC1E,IAAI,MAAM,IAAI,KAAK,MAAM;YACvB,MAAM,IAAI,MAAM;QAClB;QACA,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file://P%3A/decentralized_ai_realestate/frontend/dapp-ai-realestate/lib/web3/auth.ts"],"sourcesContent":["import Web3 from 'web3';\r\nimport { getWeb3Instance, getConnectedAccounts } from './utils';\r\n\r\nexport const connectWallet = async () => {\r\n  const web3 = await getWeb3Instance();\r\n  if (!web3) throw new Error('Web3 not initialized');\r\n  \r\n  const accounts = await getConnectedAccounts(web3);\r\n  if (accounts.length === 0) throw new Error('No accounts found');\r\n  \r\n  return {\r\n    web3,\r\n    account: accounts[0],\r\n    chainId: await web3.eth.getChainId()\r\n  };\r\n};\r\n\r\nexport const signMessage = async (web3: Web3, account: string, message: string) => {\r\n  return await web3.eth.personal.sign(message, account, '');\r\n};\r\n\r\nexport const verifySignature = async (web3: Web3, message: string, signature: string, address: string) => {\r\n  const recoveredAddress = await web3.eth.personal.ecRecover(message, signature);\r\n  return recoveredAddress.toLowerCase() === address.toLowerCase();\r\n};"],"names":[],"mappings":";;;;;AACA;;AAEO,MAAM,gBAAgB;IAC3B,MAAM,OAAO,MAAM,CAAA,GAAA,oHAAA,CAAA,kBAAe,AAAD;IACjC,IAAI,CAAC,MAAM,MAAM,IAAI,MAAM;IAE3B,MAAM,WAAW,MAAM,CAAA,GAAA,oHAAA,CAAA,uBAAoB,AAAD,EAAE;IAC5C,IAAI,SAAS,MAAM,KAAK,GAAG,MAAM,IAAI,MAAM;IAE3C,OAAO;QACL;QACA,SAAS,QAAQ,CAAC,EAAE;QACpB,SAAS,MAAM,KAAK,GAAG,CAAC,UAAU;IACpC;AACF;AAEO,MAAM,cAAc,OAAO,MAAY,SAAiB;IAC7D,OAAO,MAAM,KAAK,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,SAAS;AACxD;AAEO,MAAM,kBAAkB,OAAO,MAAY,SAAiB,WAAmB;IACpF,MAAM,mBAAmB,MAAM,KAAK,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS;IACpE,OAAO,iBAAiB,WAAW,OAAO,QAAQ,WAAW;AAC/D","debugId":null}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file://P%3A/decentralized_ai_realestate/frontend/dapp-ai-realestate/providers/Web3AuthProvider.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport Web3 from 'web3';\r\nimport { connectWallet, signMessage, verifySignature } from '@/lib/web3/auth';\r\n\r\ninterface Web3AuthContextType {\r\n  web3: Web3 | null;\r\n  account: string | null;\r\n  chainId: bigint | null;\r\n  connect: () => Promise<void>;\r\n  disconnect: () => void;\r\n  isAuthenticated: boolean;\r\n  authToken: string | null;\r\n}\r\n\r\nconst Web3AuthContext = createContext<Web3AuthContextType | undefined>(undefined);\r\n\r\nexport const Web3AuthProvider = ({ children }: { children: ReactNode }) => {\r\n  const [web3, setWeb3] = useState<Web3 | null>(null);\r\n  const [account, setAccount] = useState<string | null>(null);\r\n  const [chainId, setChainId] = useState<bigint | null>(null);\r\n  const [authToken, setAuthToken] = useState<string | null>(null);\r\n\r\n  const connect = async () => {\r\n    try {\r\n      const { web3, account, chainId } = await connectWallet();\r\n      setWeb3(web3);\r\n      setAccount(account);\r\n      setChainId(chainId);\r\n\r\n      // Generate a signature for backend verification\r\n      const message = `Welcome to our dApp! Please sign this message to verify your wallet. Nonce: ${Date.now()}`;\r\n      const signature = await signMessage(web3, account, message);\r\n\r\n      // In a real app, you would send this to your backend for verification\r\n      const isValid = await verifySignature(web3, message, signature, account);\r\n      if (isValid) {\r\n        setAuthToken(signature); // In production, use a proper JWT from your backend\r\n      }\r\n\r\n      // Listen for account changes\r\n      if (window.ethereum) {\r\n        window.ethereum.on('accountsChanged', (accounts: string[]) => {\r\n          if (accounts.length > 0) {\r\n            setAccount(accounts[0]);\r\n          } else {\r\n            disconnect();\r\n          }\r\n        });\r\n\r\n        window.ethereum.on('chainChanged', () => {\r\n          window.location.reload();\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error connecting wallet:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const disconnect = () => {\r\n    setWeb3(null);\r\n    setAccount(null);\r\n    setChainId(null);\r\n    setAuthToken(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if wallet is already connected when component mounts\r\n    const checkConnectedWallet = async () => {\r\n      if (window.ethereum && window.ethereum.selectedAddress) {\r\n        try {\r\n          await connect();\r\n        } catch (error) {\r\n          console.error('Error reconnecting wallet:', error);\r\n        }\r\n      }\r\n    };\r\n\r\n    checkConnectedWallet();\r\n\r\n    return () => {\r\n      if (window.ethereum) {\r\n        window.ethereum.removeAllListeners();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Web3AuthContext.Provider\r\n      value={{\r\n        web3,\r\n        account,\r\n        chainId,\r\n        connect,\r\n        disconnect,\r\n        isAuthenticated: !!authToken,\r\n        authToken,\r\n      }}\r\n    >\r\n      {children}\r\n    </Web3AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useWeb3Auth = () => {\r\n  const context = useContext(Web3AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useWeb3Auth must be used within a Web3AuthProvider');\r\n  }\r\n  return context;\r\n};"],"names":[],"mappings":";;;;;AAEA;AAEA;AAJA;;;;AAgBA,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAAmC;AAEhE,MAAM,mBAAmB,CAAC,EAAE,QAAQ,EAA2B;IACpE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;IAC9C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IACtD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IACtD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAE1D,MAAM,UAAU;QACd,IAAI;YACF,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,mHAAA,CAAA,gBAAa,AAAD;YACrD,QAAQ;YACR,WAAW;YACX,WAAW;YAEX,gDAAgD;YAChD,MAAM,UAAU,CAAC,4EAA4E,EAAE,KAAK,GAAG,IAAI;YAC3G,MAAM,YAAY,MAAM,CAAA,GAAA,mHAAA,CAAA,cAAW,AAAD,EAAE,MAAM,SAAS;YAEnD,sEAAsE;YACtE,MAAM,UAAU,MAAM,CAAA,GAAA,mHAAA,CAAA,kBAAe,AAAD,EAAE,MAAM,SAAS,WAAW;YAChE,IAAI,SAAS;gBACX,aAAa,YAAY,oDAAoD;YAC/E;YAEA,6BAA6B;YAC7B,IAAI,OAAO,QAAQ,EAAE;gBACnB,OAAO,QAAQ,CAAC,EAAE,CAAC,mBAAmB,CAAC;oBACrC,IAAI,SAAS,MAAM,GAAG,GAAG;wBACvB,WAAW,QAAQ,CAAC,EAAE;oBACxB,OAAO;wBACL;oBACF;gBACF;gBAEA,OAAO,QAAQ,CAAC,EAAE,CAAC,gBAAgB;oBACjC,OAAO,QAAQ,CAAC,MAAM;gBACxB;YACF;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,MAAM;QACR;IACF;IAEA,MAAM,aAAa;QACjB,QAAQ;QACR,WAAW;QACX,WAAW;QACX,aAAa;IACf;IAEA,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,6DAA6D;QAC7D,MAAM,uBAAuB;YAC3B,IAAI,OAAO,QAAQ,IAAI,OAAO,QAAQ,CAAC,eAAe,EAAE;gBACtD,IAAI;oBACF,MAAM;gBACR,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,8BAA8B;gBAC9C;YACF;QACF;QAEA;QAEA,OAAO;YACL,IAAI,OAAO,QAAQ,EAAE;gBACnB,OAAO,QAAQ,CAAC,kBAAkB;YACpC;QACF;IACF,GAAG,EAAE;IAEL,qBACE,8OAAC,gBAAgB,QAAQ;QACvB,OAAO;YACL;YACA;YACA;YACA;YACA;YACA,iBAAiB,CAAC,CAAC;YACnB;QACF;kBAEC;;;;;;AAGP;AAEO,MAAM,cAAc;IACzB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}}]
}